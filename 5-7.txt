#include <stdio.h>
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <ctime>

using namespace std;

class Book {
    char *title;
    int price;
public:
    Book(char* t, int p) {title = new char[100000]; strcpy(title, t); price = p; }
    Book(Book& book) {
        title = new char [100000];
        price = book.price;
        strcpy(title, book.title);
    }
    ~Book() {cout << "제거되었읍니다"; delete [] title;}
    void set(char* t, int p) { strcpy(title,t); price = p; }
    void show() { cout << title << ' ' << price << "원" << endl; }
    void get() { cout << &title << '\t' << title << endl;}
};

int main(){
    Book cpp("명품C++", 10000);
    Book java = cpp;
    java.set("명품자바", 12000);
    cpp.show();
    cpp.get();
    java.show();
    java.get();
}




#include <stdio.h>
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <ctime>
#include <algorithm>

using namespace std;

class Accumulator {
    int value;
public:
    Accumulator(int value) { this->value = value; }
    Accumulator& add(int n) { value += n; return *this; }
    int get() { return value; }
};


// Accumulator&는 참조형 클래스. 참조형 클래스란 물리적 메모리 주소에 접근할 수는 없지만 논리적인 메모리 주소에는 RW 가능. 논리적이라 함은 청크 단위로 조직화된 메모리 주소를 일컫음. 예컨대 물리적 주소란 *ptr; ptr+=1 에서 ptr의 chopped address를 일컫음. 반면에 논리적 주소란 int a, b; &ref = a; &ref = b;에서 a의 주소처럼 내적비분리성의 메모리 주소를 뜻함.

int main(){
    Accumulator acc(10);
    acc.add(5).add(3);
    cout << acc.get();
}
