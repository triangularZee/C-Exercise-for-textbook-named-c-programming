#include <stdio.h>
#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <ctime>
#include <algorithm>

using namespace std;

class MyIntStack {
    int *p;
    int size;
    int tos;
public:
    MyIntStack() { tos = 0; }
    MyIntStack(int size) { p = new int[size]; tos = 0; this->size = size; }
    MyIntStack(MyIntStack& s);
    ~MyIntStack() {cout << &p << endl; delete[] this->p;};
    bool push(int n);
    bool pop(int &n);
};

MyIntStack::MyIntStack(MyIntStack& s){
    this->tos = s.tos;
    this->size = s.size;
    p = new int[s.size+1];
    memcpy(this->p, s.p, s.size);
}

bool MyIntStack::push(int n){
    if (tos > size){
         return false;
    }
    p[tos++] = n;
    return true;
}

bool MyIntStack::pop(int &n){
    if(tos == 0){
        return false;
    }
    else {
        n = p[--tos];
        return true;
    }
}

int main() {
    MyIntStack a(10);
    a.push(10);
    a.push(20);
    MyIntStack b = a; //묵시적 복사생성자 호출
    
    b.push(30);
    
    int n;
    a.pop(n);
    cout << "스택 a에서 팝한 값 " << n << endl;
    b.pop(n);
    cout << "스택 b에서 팝한 값 " << n << endl;
}

